// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package logs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	bytes "github.com/taubyte/go-sdk/ethereum/client/bytes"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComTaubyteGoSdkEthereumClientLogs(in *jlexer.Lexer, out *Log) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(bytes.Address)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					out.Address = bytes.BytesToAddress(in.Bytes())
				}
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]*bytes.Hash, 0, 8)
					} else {
						out.Topics = []*bytes.Hash{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *bytes.Hash
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(bytes.Hash)
						}
						if in.IsNull() {
							in.Skip()
						} else {
							v2.SetBytes(in.Bytes())
						}
					}
					out.Topics = append(out.Topics, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "blockNumber":
			out.BlockNumber = uint64(in.Uint64())
		case "transactionHash":
			if in.IsNull() {
				in.Skip()
				out.TxHash = nil
			} else {
				if out.TxHash == nil {
					out.TxHash = new(bytes.Hash)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					out.TxHash.SetBytes(in.Bytes())
				}
			}
		case "transactionIndex":
			out.TxIndex = uint(in.Uint())
		case "blockHash":
			if in.IsNull() {
				in.Skip()
				out.BlockHash = nil
			} else {
				if out.BlockHash == nil {
					out.BlockHash = new(bytes.Hash)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					out.BlockHash.SetBytes(in.Bytes())
				}
			}
		case "logIndex":
			out.Index = uint(in.Uint())
		case "removed":
			out.Removed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComTaubyteGoSdkEthereumClientLogs(out *jwriter.Writer, in Log) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		if in.Address == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(in.Address.Bytes())
		}
	}
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Topics {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					out.Base64Bytes(v9.Bytes())
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BlockNumber))
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		if in.TxHash == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(in.TxHash.Bytes())
		}
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		out.Uint(uint(in.TxIndex))
	}
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		if in.BlockHash == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(in.BlockHash.Bytes())
		}
	}
	{
		const prefix string = ",\"logIndex\":"
		out.RawString(prefix)
		out.Uint(uint(in.Index))
	}
	{
		const prefix string = ",\"removed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Removed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Log) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComTaubyteGoSdkEthereumClientLogs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Log) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComTaubyteGoSdkEthereumClientLogs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Log) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComTaubyteGoSdkEthereumClientLogs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Log) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComTaubyteGoSdkEthereumClientLogs(l, v)
}
func easyjson6601e8cdDecodeGithubComTaubyteGoSdkEthereumClientLogs1(in *jlexer.Lexer, out *EventLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "log":
			if in.IsNull() {
				in.Skip()
				out.Log = nil
			} else {
				if out.Log == nil {
					out.Log = new(Log)
				}
				(*out.Log).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComTaubyteGoSdkEthereumClientLogs1(out *jwriter.Writer, in EventLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"log\":"
		out.RawString(prefix[1:])
		if in.Log == nil {
			out.RawString("null")
		} else {
			(*in.Log).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComTaubyteGoSdkEthereumClientLogs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComTaubyteGoSdkEthereumClientLogs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComTaubyteGoSdkEthereumClientLogs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComTaubyteGoSdkEthereumClientLogs1(l, v)
}
